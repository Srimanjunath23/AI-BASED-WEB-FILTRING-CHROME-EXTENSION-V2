// Check if an image should be blurred
function shouldBlurImage(img, pageKeywords) {
  // Skip if no src attribute or data URIs (for performance)
  if (!img.src || img.src.startsWith('data:') || img.src.startsWith('blob:')) {
    return false;
  }

  // Get alt text and surrounding context
  const imgAlt = (img.alt || '').toLowerCase();
  const imgSrc = img.src.toLowerCase();
  const nearbyText = getNearbyText(img, 200).toLowerCase();

  // Set default unsafe keywords
  const unsafeKeywords = [
    'xxx', 'porn', 'nude', 'naked', 'sex', 'adult', 'nsfw',
    'gore', 'blood', 'violent', 'violence', 'murder', 'death',
    'suicide', 'self-harm', 'kill myself'
  ];

  // Add keywords found on the page
  const allKeywords = [...new Set([...unsafeKeywords, ...pageKeywords])];

  // First, check direct keyword matches in alt text or src URL
  const directMatch = allKeywords.some(keyword => 
    imgAlt.includes(keyword) || imgSrc.includes(keyword)
  );

  if (directMatch) return true;

  // Second, check surrounding text context
  const contextMatch = allKeywords.some(keyword => nearbyText.includes(keyword));
  if (contextMatch) return true;

  // Finally, try to check image dimensions for potential NSFW content
  // This is a simple heuristic based on common image ratios for adult content
  const aspectRatio = img.width / img.height;
  const hasTypicalNsfwDimensions = (
    img.width > 200 && 
    img.height > 200 && 
    aspectRatio > 0.5 && 
    aspectRatio < 1.5 && 
    nearbyText.includes('watch') || 
    nearbyText.includes('click') || 
    nearbyText.includes('view')
  );

  // Use a lower threshold for matching if we have more context signals
  if (hasTypicalNsfwDimensions && (nearbyText.includes('content') || nearbyText.includes('video'))) {
    return true;
  }

  return false;
}

// Get text around an element
function getNearbyText(element, charLimit = 200) {
  // Get the parent element
  const parent = element.parentNode;
  if (!parent) return '';

  // Get text from parent and siblings
  let text = parent.innerText || '';

  // Get text from previous and next siblings
  const prevSibling = element.previousElementSibling;
  const nextSibling = element.nextElementSibling;

  if (prevSibling) text += ' ' + (prevSibling.innerText || '');
  if (nextSibling) text += ' ' + (nextSibling.innerText || '');

  // Trim and limit length
  text = text.toLowerCase().trim();
  return text.length > charLimit ? text.substring(0, charLimit) : text;
}

// Main image blurring function using the provided approach
async function blurImages() {
  const images = document.querySelectorAll('img');
  const unsafeKeywords = ['xxx', 'porn', 'violence', 'suicide', 'self-harm', 'attack'];

  const sensitivityThresholds = {
    low: 0.85,
    medium: 0.75,
    high: 0.60
  };

  const threshold = sensitivityThresholds[extensionSettings.sensitivity || 'medium'];

  for (const img of images) {
    // Skip if already processed
    if (img.dataset.safeguardProcessed) continue;
    img.dataset.safeguardProcessed = 'true';

    // Skip small images (likely icons)
    if (img.width < 50 || img.height < 50) continue;

    // Skip base64/blob images
    if (img.src.startsWith('data:') || img.src.startsWith('blob:')) continue;

    try {
      // Get surrounding text for context
      const nearbyText = getNearbyText(img, 200);

      // Send to server for AI analysis
      const result = await chrome.runtime.sendMessage({
        type: 'ANALYZE_IMAGE',
        imageUrl: img.src,
        surrounding_text: nearbyText,
        image_alt: img.alt || ''
      });

      if (result && result.is_harmful) {
        // Create wrapper div
        const wrapper = document.createElement('div');
        wrapper.style.position = 'relative';
        wrapper.style.display = 'inline-block';

        // Move image into wrapper
        img.parentNode.insertBefore(wrapper, img);
        wrapper.appendChild(img);

        // Apply blur
        img.style.filter = 'blur(30px)';
        img.style.transition = 'filter 0.3s';

        // Create unlock button
        const button = document.createElement('button');
        button.textContent = 'Show Image';
        button.style.cssText = `
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          z-index: 1000;
          padding: 8px 16px;
          background-color: #000;
          color: #fff;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          font-size: 14px;
        `;

        // Handle unblur with password protection
        button.addEventListener('click', async () => {
          try {
            const settings = await chrome.storage.sync.get(['isPasswordProtected', 'password']);

            if (settings.isPasswordProtected && settings.password) {
              const enteredPassword = prompt('Enter extension password to view this image:');

              if (!enteredPassword) return;

              const isCorrect = await verifyPassword(enteredPassword, settings.password);
              if (!isCorrect) {
                alert('Incorrect password');
                return;
              }
            }

            img.style.filter = 'none';
            button.remove();

            // Track unblur action
            chrome.runtime.sendMessage({
              type: 'RECORD_IMAGE_UNBLUR',
              imageUrl: img.src
            }).catch(console.error);

          } catch (error) {
            console.error('Error handling image unblur:', error);
            alert('An error occurred. Please try again.');
          }
        });

        wrapper.appendChild(button);
      }
    } catch (error) {
      console.error('Error analyzing image:', error);
    }
  }
}

// Apply blur to a sensitive image
function applyBlurToImage(img) {
  // Skip if already blurred
  if (img.dataset.safeguardBlurred) return;
  img.dataset.safeguardBlurred = 'true';

  // Generate a unique ID for this image
  const imageId = 'safeguard-' + Math.random().toString(36).substring(2, 15);

  // Create a wrapper to maintain original dimensions
  const wrapper = document.createElement('div');
  wrapper.style.position = 'relative';
  wrapper.style.display = 'inline-block';
  wrapper.dataset.imageId = imageId;

  // Clone original styles that affect layout
  const imgStyles = window.getComputedStyle(img);
  wrapper.style.margin = imgStyles.margin;
  wrapper.style.width = imgStyles.width;
  wrapper.style.height = imgStyles.height;

  // Insert wrapper and move image inside
  const parent = img.parentNode;
  parent.insertBefore(wrapper, img);
  wrapper.appendChild(img);

  // Apply blur to the image
  img.style.filter = 'blur(10px)';
  img.style.transition = 'filter 0.3s ease';
  img.style.width = '100%';
  img.style.height = '100%';

  // Store the original image data for later reference
  blurredImages.set(imageId, {
    src: img.src,
    alt: img.alt,
    width: img.width,
    height: img.height
  });

  // Create unlock button
  const button = document.createElement('button');
  button.innerText = 'Show Image';
  button.dataset.imageId = imageId;
  Object.assign(button.style, {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    zIndex: '9999',
    backgroundColor: '#000',
    color: '#fff',
    padding: '6px 10px',
    borderRadius: '5px',
    border: 'none',
    cursor: 'pointer',
    opacity: '0.85'
  });

  // Add button to wrapper
  wrapper.appendChild(button);
}

// Set up click handlers for blurred images
function setupClickHandlers() {
  // Use event delegation for better performance
  document.addEventListener('click', async (event) => {
    // Check if click was on a view button
    if (event.target.tagName === 'BUTTON' && 
        event.target.dataset.imageId && 
        (event.target.textContent === 'Show Image' || event.target.className === 'safeguard-view-button')) {

      // Prevent any default actions
      event.preventDefault();
      event.stopPropagation();

      // Get image ID
      const imageId = event.target.dataset.imageId;
      if (!imageId || !blurredImages.has(imageId)) return;

      try {
        // Get settings
        const settings = await chrome.storage.sync.get(['isPasswordProtected', 'password']);

        // Handle password verification
        if (settings.isPasswordProtected && settings.password) {
          const enteredPassword = prompt('Enter extension password to view this image:');

          // If user cancels prompt
          if (enteredPassword === null) return;

          // Verify password (simple hash for demo)
          const isCorrect = await verifyPassword(enteredPassword, settings.password);

          if (isCorrect) {
            // Password correct, unblur image
            unblurImage(imageId, event.target);
          } else {
            // Password incorrect
            alert('Incorrect password.');
          }
        } else {
          // No password protection, directly unblur
          unblurImage(imageId, event.target);
        }
      } catch (error) {
        console.error('Error handling image unblur:', error);
        alert('An error occurred. Please try again.');
      }
    }
  });
}

// Simple password verification function
async function verifyPassword(enteredPassword, correctHash) {
  // Simple hash function
  const simpleHash = (str) => {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString();
  };

  // Compare hashed passwords
  const hashedInput = enteredPassword ? simpleHash(enteredPassword) : '';
  return hashedInput === correctHash;
}

// Unblur an image
function unblurImage(imageId, buttonElement) {
  // Get the image data from blurred images map
  const imageData = blurredImages.get(imageId);
  if (!imageData) return;

  // Find the wrapper and image element
  const wrapper = buttonElement.closest('[data-image-id]');
  if (!wrapper) return;

  const img = wrapper.querySelector('img');
  if (!img) return;

  // Remove blur from image
  img.style.filter = 'none';

  // Remove the button
  buttonElement.remove();

  // Increment stats
  try {
    chrome.runtime.sendMessage({
      type: 'INCREMENT_STAT',
      stat: 'imagesUnblurred'
    }).catch(() => {});
  } catch (e) {}
}